#!/usr/bin/env php
<?php
/*#!/usr/bin/php
 * This file is part of the Volta packages.
 *
 * (c) ROb Demmenie <rob@volta-framework.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);
declare(ticks=1);

/*
 * Catch [Ctl] + c and give some feedback
 */
define('START', microtime(true));

pcntl_signal(SIGINT, 'signalHandler');

function signalHandler(int $signal, mixed $sigInfo):void{
    fwrite(STDOUT, "\n\n \e[32m- PHP build in web server stopped, \n");
    fwrite(STDOUT, " \e[32m  has been active for \e[37m" . number_format(microtime(true) - START, 8). "\e[32m seconds.\n");
    fwrite(STDOUT, "\e[0m\n\n" );
    exit(0);
}

#region - Command line markup codes


$CLEAR = "\e[0m";
$BOLD = "\e[1m";
$ITALIC = "\e[3m";
$UNDERLINE = "\e[4m";
$REVERSED = "\e[7m";
$STRIKETHROUGH = "\e[9m";
$BLACK = "\e[30m";
$RED = "\e[31m";
$GREEN = "\e[32m";
$YELLOW = "\e[33m";
$BLUE = "\e[34m";
$MAGENTA = "\e[35m";
$CYAN = "\e[36m";
$GRAY = "\e[37m";
$FOREGROUND = "\e[39m"; // system foreground color
$BLACK_BG = "\e[40m";
$RED_BG = "\e[41m";
$GREEN_BG = "\e[42m";
$YELLOW_BG = "\e[43m";
$BLUE_BG = "\e[44m";
$MAGENTA_BG = "\e[45m";
$CYAN_BG = "\e[46m";
$LIGHT_GREEN = "\e[92m";
$GRAY_BG = "\e[47m";
$BACKGROUND = "\e[49m"; // system background color
$LIGHT_GRAY = "\e[90m";
$LIGHT_RED = "\e[91m";
$LIGHT_YELLOW = "\e[93m";
$LIGHT_BLUE = "\e[94m";
$LIGHT_MAGENTA = "\e[95m";
$LIGHT_CYAN = "\e[96m";
$WHITE = "\e[97m";

$LINE_HOR = 0x2500;  // ─
$LINE_VERT = 0x2502; // │
$CORNER_UPPER_LEFT = 0x250c; // ┌
$CORNER_UPPER_RIGHT = 0x2510;
$CORNER_BOTTOM_LEFT = 0x2514;
$CORNER_BOTTOM_RIGHT = 0x2518;

const VERSION = '1.0.0';


#endregion -----------------------------------------------------------------------------------------------------------
#region - Environment validation


fwrite(STDOUT, $GRAY . str_repeat(mb_chr($LINE_HOR), 80) . "$CLEAR\n");
fwrite(STDOUT, " {$BLUE}PHP(".PHP_VERSION.") build-in web server extension\n");
fwrite(STDOUT, " {$FOREGROUND}Author: {$ITALIC}{$GRAY}Rob Demmenie <rob@vollta-framework.com>{$CLEAR}\n");
fwrite(STDOUT, " {$FOREGROUND}Version: {$ITALIC}{$GRAY}".VERSION."{$CLEAR}\n");
fwrite(STDOUT, $GRAY . str_repeat(mb_chr($LINE_HOR), 80) ."$CLEAR\n");

if (version_compare(PHP_VERSION, '7.0.0') === -1) {
    fwrite(stream:STDOUT, data:"\n{$BOLD}php-server{$CLEAR} needs PHP 8.0.0 or higher! Currently running ". PHP_VERSION ."\n\n");
    exit(1);
}

if (!function_exists('mb_chr')) {
    fwrite(stream:STDOUT, data:"\n{$BOLD}php-server{$CLEAR} needs Multibyte String Functions! Please update your PHP configuration\n\n");
    exit(1);
}

$cwd = getcwd();
if (false === $cwd) {
    fwrite(STDOUT, "\nCannot determine the current working directory.\n"
        . "{$GRAY}{$ITALIC} On some Unix variants this happens if any one of the parent directories \n"
        . " does not have the readable or search mode set, even if the current directory \n"
        . " does. See chmod for more information on modes and permissions\n\n");
    exit(1);
}
$workingDir = rtrim((string)$cwd, DIRECTORY_SEPARATOR);


#endregion -----------------------------------------------------------------------------------------------------------
#region - Options definitions and initialization

/*
 * Settings
 */
$phpServer = [
    'verbose' => false,
    'host' => 'localhost',
    'port' => 8080,
    'root'=> '',
    'file'=> '',
    'php-conf'=> '',
];
$putEnv = [];
$customConfig = false;
$phpServerFile = __DIR__ . DIRECTORY_SEPARATOR. '.php-server-conf'; // test configuration

if (isset($_SERVER['HOME'])) {
    $phpServerFile = $_SERVER['HOME'] . DIRECTORY_SEPARATOR . '.php-server-conf';
}

if (is_file($phpServerFile)) {
    $customConfig = true;
    $settings = parse_ini_file($phpServerFile, true, INI_SCANNER_TYPED);
    $projectSettings = $settings;
    if (isset($settings[$workingDir])) $projectSettings = $settings[$workingDir];
    if (isset($projectSettings['php-server'])) {
        $phpServer = array_merge($phpServer, $projectSettings['php-server']);
    }
    if (isset($projectSettings['env'])) {
        $putEnv = array_merge($putEnv, $projectSettings['env']);
    }
}


$shortOptions = 'vh:p:r:f:c:';
$longOptions = [
    'help',
    'version',
    'host:',
    'port:',
    'root',
    'file:',
];
$TAB = "\n".str_repeat(' ', 23) . $LIGHT_GRAY . mb_chr($CORNER_BOTTOM_LEFT) . $CLEAR . ' ';
$optionDescriptions = [
    " {$YELLOW}    --help            {$CLEAR}Display this help.\n",
    " {$YELLOW}    --version         {$CLEAR}Display the current version.\n",
    " {$YELLOW}-v                    {$CLEAR}If present additional information is provided.\n",
    " {$YELLOW}-h  --host{$CLEAR}{$GRAY} <address>  {$CLEAR}Expects a value which represents the address or{$TAB}hostname for the webserver to listen to. [default: {$ITALIC}{$CYAN}{$phpServer['host']}{$CLEAR}]\n",
    " {$YELLOW}-p  --port{$CLEAR}{$GRAY} <number>   {$CLEAR}Expects a port number to listen on. [default: {$ITALIC}{$CYAN}{$phpServer['port']}{$CLEAR}]\n",
    " {$YELLOW}-r  --root{$CLEAR}{$GRAY} <dir>      {$CLEAR}The directory the server needs to start in. Must{$TAB}be relative to the working directory.{$TAB}[default: {$ITALIC}{$CYAN}$workingDir/{$phpServer['root']}{$CLEAR}]\n",
    " {$YELLOW}-f  --file{$CLEAR}{$GRAY} <file>     {$CLEAR}Expects a valid file as front-controller, must be{$TAB}in the path of the document root. [default: {$ITALIC}{$CYAN}{$phpServer['file']}{$CLEAR}]\n",
    " {$YELLOW}-c{$GRAY} <file>             {$CLEAR}PHP ini file. [default: {$ITALIC}{$CYAN}". ((empty($phpServer['php-conf'] )) ? get_cfg_var('cfg_file_path') : $phpServer['php-conf']) ."{$CLEAR}]\n",
];

$restIndex = null;
$options = getopt( short_options: $shortOptions, long_options: $longOptions,rest_index: $restIndex);

if (false === $options) {
    fwrite(stream:STDOUT, data:"\n\n\t{$RED}ERROR: Invalid arguments after $restIndex " . $longOptions[$restIndex] . "\n\n");
    exit(1);
}

/*
 * Help and Version
 * When the help is requested print the help and exit
 */
if (isset($options['help'])) {
    fwrite(STDOUT, "   {$CLEAR}{$ITALIC}{$LIGHT_GRAY}License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\n");
    fwrite(STDOUT, "   This is free software: you are free to change and redistribute it.\n");
    fwrite(STDOUT, "   There is NO WARRANTY, to the extent permitted by law.\n");
    fwrite(STDOUT, "   Report bugs to: {$UNDERLINE}{$BLUE}<email:rob@volta-framework.com>{$CLEAR}{$ITALIC}{$LIGHT_GRAY}\n");
    fwrite(STDOUT, "   Home page: <https://github.com/volta-framework/php-server>\n");
    fwrite(STDOUT, "\n {$CLEAR}Usage:\n  php-server [OPTIONS]\n");
    fwrite(STDOUT, " {$CLEAR} php-server --help | --version\n");
    fwrite(STDOUT, "\n {$CLEAR}Options:\n");
    foreach($optionDescriptions as $description) fwrite(STDOUT, $description);
    fwrite(stream:STDOUT, data:"\n\n");
    exit(0);
}
if (isset($options['version'])) exit(0);

/*
 * Verbose
 */
$verbose = isset($options['v']) || (bool)$phpServer['verbose'];
if($verbose) {
    if(empty($phpServerFile)) {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - PHP server configuration: {$BOLD}{$GRAY}NULL{$CLEAR}\n");
    } else {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - PHP server configuration: {$BOLD}{$GRAY}$phpServerFile{$CLEAR}\n");
    }

}

/*
 * Host
 */
if(isset($options['h'])) $host  = $options['h'];
elseif (isset($options['host'])) $host  = $options['host'];
else $host = $phpServer['host'];
if ($host !== 'localhost' && !filter_var($host, FILTER_VALIDATE_IP)) {
    fwrite(STDOUT, "\n\t{$RED}ERROR: \"$host\" is not a valid IP address!\n\n");
    exit(1);
}
if($verbose) fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Host: {$BOLD}{$GRAY}$host{$CLEAR}\n");

/*
 * Port
 * Check whether the port is in use, if in use show possible commands to close the port.
 */
if(isset($options['p'])) $port  = $options['p'];
elseif (isset($options['port'])) $port  = $options['port'];
else $port = $phpServer['port'];
$connection = @fsockopen($host, (int)$port);
if (is_resource($connection)) {
    $result = shell_exec("ps aux| grep 'php -S.*:$port'");
    fwrite(STDOUT, "\n\t{$RED}ERROR: Port $port is already in use!\n");
    fwrite(STDOUT, "\t{$ITALIC}{$FOREGROUND}If the {$GRAY}PHP build-in web server{$CLEAR}{$ITALIC}{$FOREGROUND} is already listening on\n");
    fwrite(STDOUT, "\tthis port try using the following commands to find the\n");
    fwrite(STDOUT, "\tprocess ID and to stop the process:\n\n");
    fwrite(STDOUT, "\t{$GRAY}>{$CYAN}  ps aux| grep 'php -S .*:$port'\n");
    fwrite(STDOUT, "\t{$GRAY}>{$CYAN}  kill -9 <PROCESS ID>\n\n");
    exit(1);
}
if($verbose) {
    if (empty($port)) {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Port: {$BOLD}{$GRAY}RANDOM{$CLEAR}\n");
    } else {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Port: {$BOLD}{$GRAY}$port{$CLEAR}\n");
    }
}

/* (Document)Root */
if(isset($options['r'])) $root  = $options['r'];
elseif (isset($options['root'])) $root  = $options['root'];
else $root = $phpServer['root'];
$rootReal = realpath($workingDir . DIRECTORY_SEPARATOR . $root);
if (!is_dir($rootReal)) {
    fwrite(STDOUT, "\n\t{$RED}ERROR: Root '$root' is not a valid directory!\n\n");
    exit(1);
}
$root = $rootReal;
if($verbose) fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - DocumentRoot: {$BOLD}{$GRAY}$root{$CLEAR}\n");

/* Front Controller */
if(isset($options['f'])) $file  = $options['f'];
elseif (isset($options['file'])) $file  = $options['file'];
else $file = $phpServer['file'];
if (!empty($file)) {
    $realFile = realpath($root . DIRECTORY_SEPARATOR . $file);
    if ($realFile === false || !is_file($realFile)) {
        fwrite(STDOUT, "\n\t{$RED}ERROR: Given front controller '$root" .DIRECTORY_SEPARATOR . "$file' does not exists.\n\n");
        exit(1);
    }
}
if($verbose) {
    if (empty($file)) {
        if (!is_file($root . DIRECTORY_SEPARATOR . 'index.php') && (!is_file($root . DIRECTORY_SEPARATOR . 'index.html'))){
           fwrite(STDOUT, "{$YELLOW}{$ITALIC} - NOTICE: No FrontController (index.php|index.html) found in {$BOLD}{$GRAY}\"$root\"{$CLEAR}\n");
        }
    } else {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - FrontController: {$BOLD}{$GRAY}$file{$CLEAR}\n");
    }
}

/*
 * Environment variables
 */
foreach($putEnv as $key => $value) {
    if (false === putenv("$key=$value")) {
        fwrite(STDOUT, "{$YELLOW}{$ITALIC} - NOTICE: Unable to set environment variable {$GRAY}$key{$YELLOW}{$ITALIC} to {$GRAY}$value{$YELLOW}{$ITALIC}{$CLEAR}\n");
    }  else {
        if ($verbose) {
            fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - EnvironmentVariable $key: {$BOLD}{$GRAY}" . getenv($key) . "{$CLEAR}\n");
        }
    }
}


/*
* PHP CConfiguration
*/
$ini = $options['c'] ?? $phpServer['php-conf'];
if (!empty($ini)){
    $iniReal = realpath($ini);
    if (false === $iniReal || !is_file($iniReal)) {
        fwrite(STDOUT, "\n\t{$RED}ERROR: PHP configuration file '$ini' not found\n\n");
        exit(1);
    }
    $ini = $iniReal;
    if($verbose) fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - PHP initialization: {$BOLD}{$GRAY}$ini{$CLEAR}\n");
} else {
    if($verbose) fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - PHP initialization: {$BOLD}{$GRAY}".get_cfg_var('cfg_file_path')."{$CLEAR}\n");
}

#endregion -----------------------------------------------------------------------------------------------------------
#region - Execute


/* Create the command and if verbose is set show command */
$command = sprintf("php -S %s:%s %s %s",$host,$port,
    (empty($file)) ? '' : $file,
    (empty($ini)) ? '' : '-c ' . $ini
);

/* Change working directory if needed */
if ($root !== $workingDir) {
    if (chdir($root)) {
        if ($verbose) {
            fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Changed working directory from {$BOLD}{$GRAY}$workingDir{$CLEAR} {$LIGHT_GRAY}{$ITALIC}to {$BOLD}{$GRAY}$root{$CLEAR}\n");
        }
    } else {
        fwrite(STDOUT, "\n\t{$RED}ERROR: Unable to change working directory from {$BOLD}{$GRAY}$workingDir{$CLEAR} {$RED}{$ITALIC}to {$BOLD}{$GRAY}$root{$CLEAR}\n\n");
        exit(1);
    }
}

/* System information */
if ($verbose) {
    if (function_exists('posix_getpid')) {
        fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Process ID: {$BOLD}{$GRAY}" . posix_getpid() . "{$CLEAR}\n");
    }
    fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - OS: {$BOLD}{$GRAY}".php_uname()."{$CLEAR}\n");
    fwrite(STDOUT, "{$LIGHT_GRAY}{$ITALIC} - Command: {$BOLD}{$GRAY}$command{$CLEAR}\n");
}

fwrite(STDOUT,"{$ITALIC}{$GRAY} Type {$BOLD}{$BLUE}[Ctrl] + C{$CLEAR}{$ITALIC}{$GRAY} to stop the Development Server{$CLEAR}\n");
fwrite(STDOUT, "{$CLEAR}{$FOREGROUND}{$BACKGROUND}");
$result = shell_exec($command);

fwrite(STDOUT, 'done!');
#endregion -----------------------------------------------------------------------------------------------------------

exit(0);



